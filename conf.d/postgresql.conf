[DEFAULT]
method = GET
limit = 
scopes = common


[ENDPOINT:postgres_get_client]
docfile = docs/get_client.yaml
storage = POSTGRES
rule = demo/postgres/client
limit = 2 per second
query = 
    SELECT c.* FROM demo.client c
    JOIN demo.apikey api ON api.client_id = c.client_id
    WHERE api.token = :token
        AND (:clientIds = '' OR c.client_id IN (SELECT CAST(value AS int) FROM STRING_TO_TABLE(:clientIds, ',') "value"))
default.clientIds = 


[ENDPOINT:postgres_get_project]
docfile = docs/get_project.yaml
storage = POSTGRES
rule = demo/postgres/project
method = GET
limit = 2 per second
query =
    SELECT p.* FROM demo.project p
    JOIN demo.apikey api ON api.client_id = p.client_id
    WHERE api.token = :token
        AND (:projectIds = '' OR p.project_id IN (SELECT CAST(value AS int) FROM STRING_TO_TABLE(:projectIds, ',') "value"))
        AND (:clientIds = '' OR p.client_id IN (SELECT CAST(value AS int) FROM STRING_TO_TABLE(:clientIds, ',') "value"))
        AND (NOT deleted OR :includeDeleted)
default.projectIds = 
default.clientIds = 
default.includeDeleted = False


[ENDPOINT:postgres_get_outcome]
docfile = docs/get_outcome.yaml
storage = POSTGRES
rule = demo/postgres/outcome
limit = 2 per second
scopes = common,extra
query =
    SELECT o.* FROM demo.outcome o
    JOIN demo.project p ON p.project_id = o.project_id
    JOIN demo.apikey api ON api.client_id = p.client_id
    WHERE (api.token = :token)
        AND (:projectIds = '' OR p.project_id IN (SELECT CAST(value AS int) FROM STRING_TO_TABLE(:projectIds, ',') "value"))
        AND (sysmoment BETWEEN :startTime AND :endTime)
default.projectIds = 


# development & debug
[ENDPOINT:get_debug]
storage = POSTGRES
rule = demo/postgres/debug/<value>
query =
    SELECT :value "value"
